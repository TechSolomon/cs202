// StopWatch.hpp
// Solomon Himelbloom
// 4 February 2021
// StopWatch header file for CS 202.

#ifndef TIME_IT_STOPWATCH_HPP
#define TIME_IT_STOPWATCH_HPP

#include <iostream>
#include <iostream>
#include <stdio.h>
#include <string>
#include <map>
#include <vector>
#include <algorithm>
#include <random>
#include <chrono>
#include <ctime>
using std::cin;
using std::cout;
using std::endl;
using std::string;
using std::map;
using std::sort;
using std::reverse;
using std::mt19937;
using std::random_device;
using std::uniform_int_distribution;

class StopWatch {
private:
    string _time;
public:
    StopWatch();
    std::string getTime() const;

    int Start(); // restart the clock
    int Stop(); // record the end time (for an event)
    
    void setTime(const string &time);
    void timeCalculation() {
        auto start = std::chrono::system_clock::now();
        auto end = std::chrono::system_clock::now();

        std::chrono::duration<double> elapsed_seconds = (end - start);
        std::time_t end_time = std::chrono::system_clock::to_time_t(end);

        std::cout << "Finished computation at " << std::ctime(&end_time)
            << "Elapsed time: " << elapsed_seconds.count() << "s\n";
    }

    void randomDistribution() {
        // Will be used to obtain a seed for the random number engine.
        std::random_device rd;

        // Standard mersenne_twister_engine seeded with rd().
        std::mt19937 gen(rd());

        // Use dice to transform the random unsigned 
        // int generated by gen into an int in [1000, 10000].
        std::uniform_int_distribution<> dice(1000, 10000);
    }

    double getTimeInSeconds();
    double getTimeInMilliseconds();
};

#endif // TIME_IT_STOPWATCH_HPP
